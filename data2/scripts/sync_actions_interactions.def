import "sync_actions_variables.def"

sub sync_actions_interactions()
{
	///////////////////////////////////////////////////////////////////////////////
	// Power Switch Door
	///////////////////////////////////////////////////////////////////////////////
	Group("PowerSwitch_Door")
	{
		UseMaginOverride();
		SyncAction("PowerSwitch_Door_On")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("PowerSwitch_Door_On");

				State("PowerSwitch_Door_On")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_power_switch_industrial");
					Animation(1, "obj_syncaction_interaction_power_switch_industrial");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("PowerSwitch_Door_Off")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("PowerSwitch_Door_Off");

				State("PowerSwitch_Door_Off")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_power_off_switch_industrial");
					Animation(1, "obj_syncaction_interaction_power_off_switch_industrial");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_power_switch_industrial");
			}
			
			TriggerState("TurnOff")
			{
				Animation("obj_syncaction_interaction_power_off_switch_industrial");
			}
		}
	}


	///////////////////////////////////////////////////////////////////////////////
	// Power Switch Doorless
	///////////////////////////////////////////////////////////////////////////////
	Group("PowerSwitch_Doorless")
	{
		UseMaginOverride();
		SyncAction("PowerSwitch_Doorless_TurnOn")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("PowerSwitch_Doorless_TurnOn");

				State("PowerSwitch_Doorless_TurnOn")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_powerswitch_doorless");
					Animation(1, "obj_syncaction_interaction_powerswitch_doorless");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("PowerSwitch_Doorless_TurnOff")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("PowerSwitch_Doorless_TurnOff");

				State("PowerSwitch_Doorless_TurnOff")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_powerswitch_doorless_turnoff");
					Animation(1, "obj_syncaction_interaction_powerswitch_doorless_turnoff");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_powerswitch_doorless");
			}
			
			TriggerState("TurnOff")
			{
				Animation("obj_syncaction_interaction_powerswitch_doorless_turnoff");
			}
		}
	}







	///////////////////////////////////////////////////////////////////////////////
	// Cable Box Destination
	///////////////////////////////////////////////////////////////////////////////
	Group("CableBox_Destination")
	{
		UseMaginOverride();
		SyncAction("CableBox_plugin")
		{
            Conditions()
			{
                Tags("TriggerAction_CableAttach");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("CableBox_plugin");

				State("CableBox_plugin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_quest_cable_box");
					Animation(1, "obj_syncaction_interaction_quest_cable_box");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.1, 0.75);
					BlendDirection(1, 0, 0.1, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);
					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("CableBox_plugoff")
		{	
            Conditions()
			{
                Tags("TriggerAction_CableRetract");
            }
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("CableBox_plugoff");

				State("CableBox_plugoff")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cablebox_dest_unplug");
					Animation(1, "obj_syncaction_interaction_cablebox_dest_unplug");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.1, 0.75);
					BlendDirection(1, 0, 0.1, 0.75);
					MaintainLookDirection(true);
					BlendLookDirection(0.3);
					DisablePhysics(0);
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("CableAttach")
			{
				Animation("obj_syncaction_interaction_cablebox_plugin");
			}
			
			TriggerState("CableRetract")
			{
				Animation("obj_syncaction_interaction_cablebox_dest_unplug");
			}
		}
	}




	///////////////////////////////////////////////////////////////////////////////
	// Cable Box Source
	///////////////////////////////////////////////////////////////////////////////
	Group("CableBox_Source")
	{
		UseMaginOverride();
		SyncAction("CableBox_TakeCableFull")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
            }
            
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("CableBox_HandleCable");

				State("CableBox_HandleCable")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cable_source");
					Animation(1, "obj_syncaction_interaction_cable_source");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("CableBox_TakeCableRepeated", "CableBox_TakeCableFull")
		{
            Conditions()
			{
                Tags("TriggerAction_CablePull");
            }
            
            States()
			{
				ExtendState("CableBox_HandleCable")
                {
                    Animation(0, "m_fpp_syncaction_interaction_cable_source_plugging");
					Animation(1, "obj_syncaction_interaction_cable_source_plugging");
                }
            }
        }
        
        SyncAction("CableBox_RetractCable", "CableBox_TakeCableFull")
		{
            Conditions()
			{
                Tags("TriggerAction_CableRetract");
            }
            
            States()
			{
				ExtendState("CableBox_HandleCable")
                {
                    Animation(0, "m_fpp_syncaction_interaction_cable_source_unplugging");
					Animation(1, "obj_syncaction_interaction_cable_source_unplugging");
                }
            }
        }
	}
	
	Group("CableConnect")
	{
		UseMaginOverride();
		SyncAction("CableConnect")
		{
          
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
            Conditions()
			{
                Tags("TriggerAction_CableAttach");
			}

			States()
			{ 
				StartState("CableConnect");

				State("CableConnect")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cable_connect");
					Animation(1, "obj_syncaction_interaction_cable_connect");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.0);
					BlendDirection(1, 0, 0.0, 0.0);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
			
		}
		
		SyncAction("CableDisconnect")
		{
          
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

            Conditions()
			{
                Tags("TriggerAction_CableRetract");
            }

			States()
			{ 
				StartState("CableConnect");

				State("CableConnect")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cable_disconnect");
                    Animation(1, "obj_syncaction_interaction_cable_disconnect");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.0);
					BlendDirection(1, 0, 0.0, 0.0);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
			
		}
        
		TriggerStates()
		{
			TriggerState("CableAttach")
			{
				Animation("obj_syncaction_interaction_cable_connect");
			}
			
			TriggerState("CableRetract")
			{
				Animation("obj_syncaction_interaction_cable_disconnect");
			}
		}
	}


	

	///////////////////////////////////////////////////////////////////////////////
	// Valve TurnOn/Turnoff
	///////////////////////////////////////////////////////////////////////////////
	Group("Valve")
	{
		UseMaginOverride();
		SyncAction("Valve_TurnOn")
		{
			Conditions()
			{
                Tags("TriggerAction_Open");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("Valve_TurnOn_Begin");

				State("Valve_TurnOn_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_open_begin");
					Animation(1, "obj_syncaction_interaction_valve_open_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    DisableGravity(0);
					
					//Transition("Valve_TurnOn_Idle")
					Transition("Valve_TurnOn_Success")
					{
						AnimationFinished();
					}
				}

				State("Valve_TurnOn_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_open_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_valve_open_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					DisableGravity(0);
					
					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("Valve_TurnOn_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("Valve_TurnOn_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_open_struggle");
					Animation(1, "obj_syncaction_interaction_valve_open_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					DisableGravity(0);
					
					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("Valve_TurnOn_Success")
					{
						AnimationFinished();
						TappingGameValue(0.5);
					}
					
					Transition("Valve_TurnOn_Idle")
					{
						IsExhausted(0);
					}
				}

				State("Valve_TurnOn_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_open_success");
					Animation(1, "obj_syncaction_interaction_valve_open_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					DisableGravity(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("Valve_TurnOff")
		{
			Conditions()
			{
                Tags("TriggerAction_Close");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("Valve_TurnOff_Begin");

				State("Valve_TurnOff_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_close_begin");
					Animation(1, "obj_syncaction_interaction_valve_close_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    DisableGravity(0);
					
					//Transition("Valve_TurnOff_Idle")
					Transition("Valve_TurnOff_Success")
					{
						AnimationFinished();
					}
				}

				State("Valve_TurnOff_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_close_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_valve_close_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					DisableGravity(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("Valve_TurnOff_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("Valve_TurnOff_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_close_struggle");
					Animation(1, "obj_syncaction_interaction_valve_close_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					DisableGravity(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("Valve_TurnOff_Success")
					{
						AnimationFinished();
					}
					
					Transition("Valve_TurnOff_Idle")
					{
						IsExhausted(0);
					}
				}

				State("Valve_TurnOff_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_valve_close_success");
					Animation(1, "obj_syncaction_interaction_valve_close_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					DisableGravity(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_valve_open_success");
			}
			
			TriggerState("Close")
			{
				Animation("obj_syncaction_interaction_valve_close_success");
			}
		}
	}







	///////////////////////////////////////////////////////////////////////////////
	// Elevator Doors
	///////////////////////////////////////////////////////////////////////////////	
	Group("Elevator")
	{
		UseMaginOverride();
		SyncAction("Elevator_Open_FromOutside")
		{
			Conditions()
			{
				DirectionOffset(0, 1, 180, 90);
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("Elevator_Open_Begin");

				State("Elevator_Open_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_begin");
					Animation(1, "obj_syncaction_interaction_elevator_doors_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("Elevator_Open_Idle")
					Transition("Elevator_Open_Success")
					{
						AnimationFinished();
					}
				}

				State("Elevator_Open_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_elevator_doors_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false, 0.5);

					Transition("Elevator_Open_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("Elevator_Open_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_struggle");
					Animation(1, "obj_syncaction_interaction_elevator_doors_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false, 0.5);

					Transition("Elevator_Open_Success")
					{
						AnimationFinished();
						TappingGameValue(0.5);
					}
					
					Transition("Elevator_Open_Idle")
					{
						WaitTime(10.00);
					}

					Transition("Elevator_Open_Fail")
					{

						IsExhausted(0);
					}
				}

				State("Elevator_Open_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_success");
					Animation(1, "obj_syncaction_interaction_elevator_doors_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}

				State("Elevator_Open_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_fail");
					Animation(1, "obj_syncaction_interaction_elevator_doors_fail", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("Elevator_Open_FromInside", "Elevator_Open_FromOutside")
		{
			Conditions()
			{
				DirectionOffset(0, 1, 0, 90);
			}

			States()
			{
				StartState("Elevator_Open_Begin");

				ExtendState("Elevator_Open_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_begin_inside");
					Animation(1, "obj_syncaction_interaction_elevator_doors_begin_inside", 0.0);
				}

				ExtendState("Elevator_Open_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_idle_inside", 0.0, true);
					Animation(1, "obj_syncaction_interaction_elevator_doors_idle_inside", 0.2, true);
				}

				ExtendState("Elevator_Open_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_struggle_inside");
					Animation(1, "obj_syncaction_interaction_elevator_doors_struggle_inside", 0.0);
				}

				ExtendState("Elevator_Open_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_success_inside");
					Animation(1, "obj_syncaction_interaction_elevator_doors_success_inside", 0.0);
				}

				ExtendState("Elevator_Open_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_elevator_doors_fail_inside");
					Animation(1, "obj_syncaction_interaction_elevator_doors_fail_inside", 0.0);
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_elevator_doors_success");
			}
		}
	}

    Group("ElevatorBig")
    {
        UseMaginOverride();
		SyncAction("ElevatorBig_Open_FromOutside", "Elevator_Open_FromOutside")
        {
            States()
			{
                StartState("Elevator_Open_Begin");

                ExtendState("Elevator_Open_Begin")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_begin");
                }

                ExtendState("Elevator_Open_Idle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_idle", 0.0, true);
                }

                ExtendState("Elevator_Open_Struggle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_struggle");
                }

                ExtendState("Elevator_Open_Success")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_success");
                }

                ExtendState("Elevator_Open_Fail")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_fail");
                }
            }
        }
        
        SyncAction("ElevatorBig_Open_FromInside", "Elevator_Open_FromInside")
        {            
            States()
			{
			    StartState("Elevator_Open_Begin");
                ExtendState("Elevator_Open_Begin")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_begin_inside");                
                }

                ExtendState("Elevator_Open_Idle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_idle_inside", 0.0, true);
                }

                ExtendState("Elevator_Open_Struggle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_struggle_inside");
                }

                ExtendState("Elevator_Open_Success")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_success_inside");
                }

                ExtendState("Elevator_Open_Fail")
                {
                    Animation(0, "m_fpp_syncaction_interaction_elevator_doors_big_fail_inside");
                }
           }
        }
    
    }


	///////////////////////////////////////////////////////////////////////////////
	// Metro Side Doors
	///////////////////////////////////////////////////////////////////////////////	

	Group("Metro_Side_Doors")
	{
		UseMaginOverride();
		SyncAction("Metro_Side_Doors_FromOutside", "Elevator_Open_FromOutside")
		{
			States()
			{
				StartState("Elevator_Open_Begin");

				ExtendState("Elevator_Open_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_begin");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_begin", 0.0);
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("Elevator_Open_Idle")
					Transition("Elevator_Open_Success")
					{
						AnimationFinished();
					}
				}

				ExtendState("Elevator_Open_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_metro_side_doors_idle", 0.2, true);
                   
                    RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false, 0.5);

					Transition("Elevator_Open_Struggle")
					{
						WaitTime(0.33);
					}
				}

				ExtendState("Elevator_Open_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_struggle");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_struggle", 0.0);
				}

				ExtendState("Elevator_Open_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_success");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_success", 0.0);
				}

				ExtendState("Elevator_Open_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_fail");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_fail", 0.0);
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_metro_side_doors_success");
			}
		}


		SyncAction("Metro_Side_Doors_FromInside", "Elevator_Open_FromInside")
		{
			States()
			{
				StartState("Elevator_Open_Begin");

				ExtendState("Elevator_Open_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_begin_inside");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_begin_inside", 0.0);
                    
                    RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("Elevator_Open_Idle")
					Transition("Elevator_Open_Success")
					{
						AnimationFinished();
					}
				}

				ExtendState("Elevator_Open_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_idle_inside", 0.0, true);
					Animation(1, "obj_syncaction_interaction_metro_side_doors_idle_inside", 0.2, true);
                    
                    BlendPosition(0, 0, 0, 0, false, true);
                    RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false, 0.5);

					Transition("Elevator_Open_Struggle")
					{
						WaitTime(0.01);
					}
				}

				ExtendState("Elevator_Open_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_struggle_inside");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_struggle_inside", 0.0);
                    BlendPosition(0, 0, 0, 0, false, true);
				}

				ExtendState("Elevator_Open_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_success_inside");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_success_inside", 0.0);
                    BlendPosition(0, 0, 0, 0, false, true);
				}

				ExtendState("Elevator_Open_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_side_doors_fail_inside");
					Animation(1, "obj_syncaction_interaction_metro_side_doors_fail_inside", 0.0);
                    BlendPosition(0, 0, 0, 0, false, true);
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_metro_side_doors_success");
			}
		}
	}


	///////////////////////////////////////////////////////////////////////////////
	// Metro Wagon Doors
	///////////////////////////////////////////////////////////////////////////////	

	Group("Metro_Wagon_Doors")
	{
		UseMaginOverride();
		SyncAction("Metro_Wagon_Doors_FromOutside", "Elevator_Open_FromOutside")
		{
			States()
			{
				StartState("Elevator_Open_Begin");

				ExtendState("Elevator_Open_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_begin");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_begin", 0.0);
                	
                    RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("Elevator_Open_Idle")
					Transition("Elevator_Open_Success")
					{
						AnimationFinished();
					}    
				}

				ExtendState("Elevator_Open_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_idle", 0.2, true);
                    
                    BlendPosition(0, 0, 0, 0, false, true);
                    RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false, 0.5);

					Transition("Elevator_Open_Struggle")
					{
						WaitTime(0.33);
					}
				}

				ExtendState("Elevator_Open_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_struggle");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_struggle", 0.0);
                    BlendPosition(0, 0, 0, 0, false, true);
				}

				ExtendState("Elevator_Open_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_success");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_success", 0.0);
                    BlendPosition(0, 0, 0, 0, false, true);
				}

				ExtendState("Elevator_Open_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_fail");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_fail", 0.0);
                    BlendPosition(0, 0, 0, 0, false, true);
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_metro_wagon_doors_success");
			}
		}


		SyncAction("Metro_Wagon_Doors_FromInside", "Elevator_Open_FromInside")
		{
			States()
			{
				StartState("Elevator_Open_Begin");

				ExtendState("Elevator_Open_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_begin_inside");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_begin_inside", 0.0);
                    
                    RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("Elevator_Open_Idle")
					Transition("Elevator_Open_Success")
					{
						AnimationFinished();
					} 
				}

				ExtendState("Elevator_Open_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_idle_inside", 0.0, true);
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_idle_inside", 0.2, true);
                    
                    RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false, 0.5);

					Transition("Elevator_Open_Struggle")
					{
						WaitTime(0.01);
					}
				}

				ExtendState("Elevator_Open_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_struggle_inside");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_struggle_inside", 0.0);
				}

				ExtendState("Elevator_Open_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_success_inside");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_success_inside", 0.0);
				}

				ExtendState("Elevator_Open_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_metro_wagon_doors_fail_inside");
					Animation(1, "obj_syncaction_interaction_metro_wagon_doors_fail_inside", 0.0);
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_metro_wagon_doors_success");
			}
		}
	}






	///////////////////////////////////////////////////////////////////////////////
	// Open Door Struggle
	///////////////////////////////////////////////////////////////////////////////	
	Group("OpenDoorStruggle")
	{
		UseMaginOverride();
		SyncAction("OpenDoorStruggle")
		{
			Conditions()
			{
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("OpenDoorStruggle_Begin");

				State("OpenDoorStruggle_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_closed_door_struggle_begin");
					Animation(1, "obj_syncaction_interaction_closed_door_struggle_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("OpenDoorStruggle_Idle")
					Transition("OpenDoorStruggle_Success")
					{
						AnimationFinished();
					}
				}

				State("OpenDoorStruggle_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_closed_door_struggle_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_closed_door_struggle_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("OpenDoorStruggle_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("OpenDoorStruggle_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_closed_door_struggle_struggle");
					Animation(1, "obj_syncaction_interaction_closed_door_struggle_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("OpenDoorStruggle_Success")
					{
						AnimationFinished();
					}
					
					Transition("OpenDoorStruggle_Idle")
					{
						WaitTime(10.00);
					}

					Transition("OpenDoorStruggle_Fail")
					{

						IsExhausted(0);
					}
				}

				State("OpenDoorStruggle_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_closed_door_struggle_success");
					Animation(1, "obj_syncaction_interaction_closed_door_struggle_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}

				State("OpenDoorStruggle_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_closed_door_struggle_fail");
					Animation(1, "obj_syncaction_interaction_closed_door_struggle_fail", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_closed_door_struggle_success");
			}
		}
	}
    
	



	///////////////////////////////////////////////////////////////////////////////
	// Prisoner Rescue
	///////////////////////////////////////////////////////////////////////////////
	Group("PrisonerRescue")
	{
		UseMaginOverride();
		SyncAction("PrisonerRescue")
		{	
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("PrisonerRescue_Begin");

				State("PrisonerRescue_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_rescue_prisoner_01_begin");
					//Animation(1, "obj_syncaction_interaction_rescue_prisoner_01_begin");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			

				/*State("PrisonerRescue_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_rescue_prisoner_01_success");
					Animation(1, "obj_syncaction_interaction_rescue_prisoner_01_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}*/
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_rescue_prisoner_01_success");
			}
		}
	}



	///////////////////////////////////////////////////////////////////////////////
	// Cable Box A Plug In
	///////////////////////////////////////////////////////////////////////////////
	/*Group("CableBox_A_plug")
	{
		UseMaginOverride();
		SyncAction("CableBox_A_plug")
		{
          
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("CableBox_A_plug_in");

				State("CableBox_A_plug_in")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cablebox_plugin");
					Animation(1, "obj_syncaction_interaction_cablebox_plugin");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
	}*/



    ///////////////////////////////////////////////////////////////////////////////
	// Default Door Actions
	///////////////////////////////////////////////////////////////////////////////

	Group("DefaultDoor")
	{
		UseMaginOverride();
        /*
        SyncAction("DoorOpen_Right")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
                DirectionOffset(0, 1, 0, 90);
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("DoorTryHandle_RightDoors");

				State("DoorTryHandle_RightDoors")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_universal_doors_solution");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("DoorOpen_Left", "DoorOpen_Right")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
                DirectionOffset(0, 1, 0, 90, 180);
			}

        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("DoorTryHandle_RightDoors");

				ExtendState("DoorTryHandle_RightDoors")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_universal_doors_solution_mirror");					
				}
			}
		}
        */
        SyncAction("DoorTryHandle_RightDoors")
		{
            Conditions()
			{
                Tags("TriggerAction_CheckLocked");
                DirectionOffset(0, 1, 0, 90);
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("DoorTryHandle_RightDoors");

				State("DoorTryHandle_RightDoors")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_universal_doors_solution_fail");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
						//WaitTime(1.0);
					}
				}
			}
		}
        	
		SyncAction("DoorTryHandle_LeftDoors", "DoorTryHandle_RightDoors")
		{	
            Conditions()
			{
                Tags("TriggerAction_CheckLocked");
                DirectionOffset(0, 1, 0, 90, 180);
			}

        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("DoorTryHandle_RightDoors");

				ExtendState("DoorTryHandle_RightDoors")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_universal_doors_solution_mirror_fail");
					//Animation(1, "obj_syncaction_interaction_door_try_handle_left_doors");
				}
			}
		}
        
        SyncAction("DoorTryHandle_RightDoorsCLA","DoorTryHandle_RightDoors")
        {
            Conditions()
			{
                Tags("TriggerAction_CheckLockedAgain");
                DirectionOffset(0, 1, 0, 90);
			}
        }
        SyncAction("DoorTryHandle_LeftDoorsCLA","DoorTryHandle_LeftDoors")
        {
            Conditions()
			{
                Tags("TriggerAction_CheckLockedAgain");
                DirectionOffset(0, 1, 0, 90, 180);
			}
        }
	}



    ///////////////////////////////////////////////////////////////////////////////
	// Basement Door Open
	///////////////////////////////////////////////////////////////////////////////
	Group("BoltDoor")
	{
		UseMaginOverride();
		SyncAction("BoltDoor")
		{
            Conditions()
			{
                SkinNameNotEqual(1, "Default_left");
                Tags("TriggerAction_CheckLocked");
                DirectionOffset(0, 1, 0, 90, 180);
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("BoltDoor_Open");

				State("BoltDoor_Open")
				{
					RequiredActors(0, 1);
					DisableGravity(0);
					Animation(0, "m_fpp_syncaction_interaction_door_basement_a_open");
					Animation(1, "obj_syncaction_interaction_door_basement_a_open");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("BoltDoor_Mirror")
		{
            Conditions()
			{
                SkinNameEqual(1, "Default_left");
                Tags("TriggerAction_CheckLocked");
                DirectionOffset(0, 1, 0, 90);
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("BoltDoor_Mirror_Open");

				State("BoltDoor_Mirror_Open")
				{
					DisableGravity(0);
					Animation(0, "m_fpp_syncaction_interaction_door_basement_a_open_mirror");
					Animation(1, "obj_syncaction_interaction_door_basement_a_open_mirror");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("BoltDoor_Mirror_WrongSide","DoorTryHandle_LeftDoors")
        {
            Conditions()
			{
                SkinNameEqual(1, "Default_left");
                Tags("TriggerAction_CheckLocked");
                DirectionOffset(0, 1, 0, 90, 180);
			}
            
            Events()
			{
                RemoveEvent(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE);
			}
        }
        
        SyncAction("BoltDoor_Mirror_WrongSideRepeated","DoorTryHandle_LeftDoors")
        {
            Conditions()
			{
                SkinNameEqual(1, "Default_left");
                Tags("TriggerAction_CheckLockedAgain");
                DirectionOffset(0, 1, 0, 90, 180);                
			}
        }
        
        
        
        SyncAction("BoltDoor_WrongSide","DoorTryHandle_RightDoors")
        {
            Conditions()
			{
                SkinNameNotEqual(1, "Default_left");
                Tags("TriggerAction_CheckLocked");
                DirectionOffset(0, 1, 0, 90);
			}
            
            Events()
			{
                RemoveEvent(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE);
			}
        }
        
        SyncAction("BoltDoor_WrongSideRepeated","DoorTryHandle_RightDoors")
        {
            Conditions()
			{
                SkinNameNotEqual(1, "Default_left");
                Tags("TriggerAction_CheckLockedAgain");
                DirectionOffset(0, 1, 0, 90);                
			}
        }
        
        TriggerStates()
		{			
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_door_basement_a_open");
			}
		}
	}

    Group("BoltDoorUnderwater")
	{
		UseMaginOverride();
        SyncAction("BoltDoorUnderwater", "BoltDoor")
		{
			States()
			{ 
				StartState("BoltDoor_Open");

				ExtendState("BoltDoor_Open")
				{
					Animation(0, "m_fpp_syncaction_interaction_underwater_door_basement_a");
					Animation(1, "obj_syncaction_interaction_underwater_door_basement_a");
				}
			}
		}
        
        TriggerStates()
		{			
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_underwater_door_basement_a");
			}
		}
    }

	///////////////////////////////////////////////////////////////////////////////
	// Open Electric Box 
	///////////////////////////////////////////////////////////////////////////////	
	Group("URB_ElectricBox_Door")
	{
		UseMaginOverride();
		SyncAction("OpenUrbElectricBoxB")
		{
			Conditions()
			{
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("OpenUrbElectricBoxB_Begin");

				State("OpenUrbElectricBoxB_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_urb_electric_box_b_begin");
					Animation(1, "obj_syncaction_interaction_urb_electric_box_b_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.4, 0.5, true);
					BlendDirection(0, 0, 0.4, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("OpenUrbElectricBoxB_Idle")
					Transition("OpenUrbElectricBoxB_Success")
					{
						AnimationFinished();
					}
				}

				State("OpenUrbElectricBoxB_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_urb_electric_box_b_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_urb_electric_box_b_idle", 0.3, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("OpenUrbElectricBoxB_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("OpenUrbElectricBoxB_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_urb_electric_box_b_struggle");
					Animation(1, "obj_syncaction_interaction_urb_electric_box_b_struggle", 0.3);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("OpenUrbElectricBoxB_Success")
					{
						AnimationFinished();
						TappingGameValue(0.5);
					}
					
					Transition("OpenUrbElectricBoxB_Idle")
					{
						WaitTime(10.00);
					}

					Transition("OpenUrbElectricBoxB_Fail")
					{

						IsExhausted(0);
					}
				}

				State("OpenUrbElectricBoxB_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_urb_electric_box_b_success");
					Animation(1, "obj_syncaction_interaction_urb_electric_box_b_success", 0.2);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}

				State("OpenUrbElectricBoxB_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_urb_electric_box_b_fail");
					Animation(1, "obj_syncaction_interaction_urb_electric_box_b_fail", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_urb_electric_box_b_success");
			}
		}
	}


	///////////////////////////////////////////////////////////////////////////////
	// Open Store Shutter
	///////////////////////////////////////////////////////////////////////////////	
	Group("StoreShutter")
	{
		UseMaginOverride();
		SyncAction("Shop_Rollup_2x_a")
		{
			Conditions()
			{
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("Shop_Rollup_2x_a_Begin");

				State("Shop_Rollup_2x_a_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_shop_rollup_2x_a_begin");
					Animation(1, "obj_syncaction_interaction_shop_rollup_2x_a_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("Shop_Rollup_2x_a_Idle")
					Transition("Shop_Rollup_2x_a_Success")
					{
						AnimationFinished();
					}
				}

				State("Shop_Rollup_2x_a_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_shop_rollup_2x_a_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_shop_rollup_2x_a_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("Shop_Rollup_2x_a_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("Shop_Rollup_2x_a_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_shop_rollup_2x_a_struggle");
					Animation(1, "obj_syncaction_interaction_shop_rollup_2x_a_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("Shop_Rollup_2x_a_Success")
					{
						AnimationFinished();
						TappingGameValue(0.5);
					}
					
					Transition("Shop_Rollup_2x_a_Idle")
					{
						WaitTime(10.00);
					}

					Transition("Shop_Rollup_2x_a_Fail")
					{

						IsExhausted(0);
					}
				}

				State("Shop_Rollup_2x_a_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_shop_rollup_2x_a_success");
					Animation(1, "obj_syncaction_interaction_shop_rollup_2x_a_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}

				State("Shop_Rollup_2x_a_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_urb_electric_box_b_fail");
					Animation(1, "obj_syncaction_interaction_shop_rollup_2x_a_fail", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_shop_rollup_2x_a_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_shop_rollup_2x_a_begin");
            }
		}
	}


	///////////////////////////////////////////////////////////////////////////////
	// Ladder Roof Open
	///////////////////////////////////////////////////////////////////////////////
	Group("RoofLadder")
	{
		UseMaginOverride();
		SyncAction("RoofLadder")
		{	
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("RoofLadder_open");

				State("RoofLadder_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_roof_ladder_open");
					Animation(1, "obj_syncaction_interaction_roof_ladder_open");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_roof_ladder_open");
			}
		}
	}


	///////////////////////////////////////////////////////////////////////////////
	// Electric Lever
	///////////////////////////////////////////////////////////////////////////////
	Group("ElectricLever")
	{
		UseMaginOverride();
		SyncAction("ElectricLever_PullDown")
		{
            Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("ElectricLever_PullDown");

				State("ElectricLever_PullDown")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_electric_lever_pulldown");
					Animation(1, "obj_syncaction_interaction_electric_lever_pulldown");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("ElectricLever_PullUp")
		{
			Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}
          
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("ElectricLever_PullUp");

				State("ElectricLever_PullUp")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_electric_lever_pullup");
					Animation(1, "obj_syncaction_interaction_electric_lever_pullup");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_electric_lever_pulldown");
			}
			
			TriggerState("TurnOff")
			{
				Animation("obj_syncaction_interaction_electric_lever_pullup");
			}
		}
	}



	///////////////////////////////////////////////////////////////////////////////
	// Door Knock (Fake SyncTrigger)
	///////////////////////////////////////////////////////////////////////////////
	Group("DoorKnock")
	{
		UseMaginOverride();
		SyncAction("DoorKnock")
		{	
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("DoorKnock");

				State("DoorKnock")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_door_knock_01");
					Animation(1, "obj_syncaction_interaction_door_knock_01");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_door_knock_01");
			}
		}
	}

    ///////////////////////////////////////////////////////////////////////////////
	// Door Check (Fake SyncTrigger)
	///////////////////////////////////////////////////////////////////////////////
	Group("DoorCheck")
	{
		UseMaginOverride();
		SyncAction("DoorCheck")
		{	
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("DoorCheck");

				State("DoorCheck")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_door_knock_01");
					Animation(1, "obj_syncaction_interaction_door_knock_01");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_door_knock_01");
			}
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Body Inspection
	///////////////////////////////////////////////////////////////////////////////
	Group("BodyInspection")
	{
		UseMaginOverride();
		SyncAction("BodyInspection_FromRight")
		{	
            Conditions()
			{
                Tags("TriggerAction_Use");
                DirectionOffset(0, 1, 180, 90);
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Inspect");

				State("Inspect")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bodyinspection");
                    Animation(1, "m_npc_syncaction_interaction_bodyinspection");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

                    BlendPosition(1, 0, 0.2, 0.75);
                    BlendDirection(1, 0, 0.2, 0.75);

					BlendLookDirection(0.5);

					// DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1, 1, true);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("BodyInspection_FromLeft")
		{	
            Conditions()
			{
                Tags("TriggerAction_Use");
                DirectionOffset(0, 1, 0, 90);
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Inspect");

				State("Inspect")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bodyinspection_left");
                    Animation(1, "m_npc_syncaction_interaction_bodyinspection_left");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

                    BlendPosition(1, 0, 0.2, 0.75);
                    BlendDirection(1, 0, 0.2, 0.75);

					BlendLookDirection(0.5);

					// DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1, 1, true);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("m_npc_syncaction_interaction_bodyinspection");
			}
		}
	}

	Group("BodyInspectionJustRight")
	{
		UseMaginOverride();
		SyncAction("BodyInspection_JustFromRight", "BodyInspection_FromRight")
		{	
            Conditions()
			{
                Tags("TriggerAction_Use");
			}
		}
	}

	Group("BodyInspectionJustLeft")
	{
		UseMaginOverride();
		SyncAction("BodyInspection_JustFromLeft", "BodyInspection_FromLeft")
		{	
            Conditions()
			{
                Tags("TriggerAction_Use");
			}
		}
	}
	
	Group("BodyInspection_Sitting")
	{
		UseMaginOverride();
		SyncAction("BodyInspection_Sitting")
		{	
            Conditions()
			{
                Tags("TriggerAction_Use");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Inspect");

				State("Inspect")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bodyinspection_sitting");
                    Animation(1, "m_npc_syncaction_interaction_bodyinspection_sitting");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

                    BlendPosition(1, 0, 0.2, 0.75);
                    BlendDirection(1, 0, 0.2, 0.75);

					BlendLookDirection(0.5);

					// DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1, 1, true);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("m_npc_syncaction_interaction_bodyinspection_sitting");
			}
		}
	}

    Group("RestingPlaceSleepStart")
	{
		UseMaginOverride();
		SyncAction("RestingPlaceSleepStartA")
		{	
            Conditions()
			{
			}
        
			Events()
			{
			}
					
			States()
			{ 
				StartState("SleepStart");

				State("SleepStart")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bed_gotosleep");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					DisablePhysics(0);

                    Discardable(true);
					
					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}
    }

    Group("RestingPlaceSleepFinish")
	{
		UseMaginOverride();
		SyncAction("RestingPlaceSleepFinishA")
		{	
            Conditions()
			{
			}
        
			Events()
			{
			}
					
			States()
			{ 
				StartState("SleepFinish");

				State("SleepFinish")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bed_wakeup");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);

					DisablePhysics(0);
					
                    MaintainLookDirection(true);

					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}
    }

    Group("WoodenBoard")
	{
		UseMaginOverride();
		SyncAction("WoodenBoard_Move")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("WoodenBoard_Move");

				State("WoodenBoard_Move")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_wooden_board_01");
					Animation(1, "obj_syncaction_interaction_wooden_board_01");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					DisablePhysics(0);
                    BlockDamageReactions(1.0);
					
                    MaintainLookDirection(true);

					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_wooden_board_01");
			}
            
            TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_wooden_board_01");
			}
		}
    }
	
	Group("MetalBoard")
	{
		UseMaginOverride();
		SyncAction("MetalBoard_Move")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MetalBoard_Move");

				State("MetalBoard_Move")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_metal_board_01");
					Animation(1, "obj_syncaction_interaction_metal_board_01");

                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					DisablePhysics(0);
                    BlockDamageReactions(1.0);
					
                    MaintainLookDirection(true);

					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_metal_board_01");
			}
            
            TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_metal_board_01");
			}
		}
    }


    Group("BombArming")
	{
		UseMaginOverride();
		SyncAction("BombArming")
		{	
            Conditions()
			{
                Tags("TriggerAction_PlantBomb");                
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT", true)
                    {
                        Item("Quest_Bomb");
                    }
                }
                
                Event(ANIM_EVENT, 0, SYNCACTION_DROP_ITEM)
                {
                    AllignObjectToItem(0, "RIGHT", 1);
                    HideInventoryItem(0);
                }

			}
					
			States()
			{ 
				StartState("PlantBomb");

				State("PlantBomb")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bomb_arming");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}		
	}


	Group("BanditCamp")
	{
		UseMaginOverride();
		SyncAction("BanditCamp_Claiming")
		{	
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("BanditCamp_Claiming_Begin");

				State("BanditCamp_Claiming_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_camp_trigger_begin");
					Animation(1, "obj_syncaction_interaction_camp_trigger_begin");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					
					Transition("BanditCamp_Claiming_Loop")
					{
						AnimationFinished();
					}
				}

				State("BanditCamp_Claiming_Idle")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_camp_trigger_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_camp_trigger_idle", 0.0, true);

					ActionCenter(1);

					Breakable(0);

					StartTappingGame(0, 0.16, 0.75, 2.5, 6, false, 0.5);

					Transition("BanditCamp_Claiming_StartLoop")
					{
						TappingGameValue(0.2);
					}
				}

				State("BanditCamp_Claiming_StartLoop")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_camp_trigger_start_loop");
					Animation(1, "obj_syncaction_interaction_camp_trigger_start_loop");

					ActionCenter(1);

					Breakable(0);

					StartTappingGame(0, 0.16, 0.75, 2.5, 6, false, 0.5);

					Transition("BanditCamp_Claiming_Loop")
					{
						AnimationFinished();
					}
				}



				State("BanditCamp_Claiming_Loop")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_camp_trigger_loop", 0.0, true);
					Animation(1, "obj_syncaction_interaction_camp_trigger_loop", 0.2, true);

					ActionCenter(1);

					Breakable(0);

					StartTappingGame(0, 0.16, 0.75, 2.5, 6, false, 0.5);

					Transition("BanditCamp_Claiming_Success")
					{
						TappingGameValue(0.95);
						//WaitTime(5.0);
						IsSyncPoint(); 
					}
					
					Transition("BanditCamp_Claiming_Idle")
					{
						TappingGameValue(0.0, 0.2);
					}
				}

				State("BanditCamp_Claiming_Success")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_camp_trigger_end");
					Animation(1, "obj_syncaction_interaction_camp_trigger_end");

					ActionCenter(1);

					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_camp_trigger_end");
			}
		}
	}

	Group("Windmill_BoxB")
	{
		UseMaginOverride();
		SyncAction("Windmill_BoxB_TurnOn")
		{	
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Windmill_BoxB_TurnOn");

				State("Windmill_BoxB_TurnOn")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_windmill_box_b_turn_on");
					Animation(1, "obj_syncaction_interaction_windmill_box_b_turn_on");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		SyncAction("Windmill_BoxB_TurnOff")
		{	
        	Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Windmill_BoxB_TurnOff");

				State("Windmill_BoxB_TurnOff")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_windmill_box_b_turn_off");
					Animation(1, "obj_syncaction_interaction_windmill_box_b_turn_off");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_windmill_box_b_turn_on");
			}

			TriggerState("TurnOff")
			{
				Animation("obj_syncaction_interaction_windmill_box_b_turn_off");
			}
		}
	}
		


	Group("InhibitorsContainer")
	{
		UseMaginOverride();
		SyncAction("InhibitorsContainerCheck")
		{	
            Conditions()
			{
                //Tags("TriggerAction_PlantBomb");
                InventoryItemRequired(0)
                {
                    Item("Inhibitor_Container");
                }
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "LEFT")
                    {
                        Item("Inhibitor_Container");
                    }
                }
			}
					
			States()
			{ 
				StartState("InhibitorsContainerCheck");

				State("InhibitorsContainerCheck")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_inhibitors_container_check");
					Animation(1, "obj_syncaction_interaction_inhibitors_container_check");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ShowWeapons(0);

					ActionCenter(0);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}		
	}



	Group("Hatch")
	{
		UseMaginOverride();
		SyncAction("Hatch")
		{	
                       
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Hatch");

				State("Hatch")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_hatch_open");
					Animation(1, "obj_syncaction_interaction_hatch_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					
                    MaintainLookDirection(true);
			

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_hatch_open");
			}
            TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_hatch_open");
			}
        } 
    }
	



	Group("BarricadeMechanism")
	{
		UseMaginOverride();
		SyncAction("BarricadeMechanism")
		{	
          	Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("BarricadeMechanism");

				State("BarricadeMechanism")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_barricade__door_open");
					Animation(1, "obj_syncaction_interaction_barricade__door_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					
                    MaintainLookDirection(true);
			

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_barricade__door_open");
			}
        } 
    }


    Group("Cube_Door")
	{
		UseMaginOverride();
		SyncAction("Cube_Door")
		{	
            Conditions()
			{
                Tags("TriggerAction_UseCube");
            
                InventoryItemRequired(0)
                {
                    Item("Quest_Cube");
                }
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube");
                    }
                }
                Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM_ALT)
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube_Active");
                    }
                }
			}
					
			States()
			{ 
				StartState("Cube_Door_Insert");

				State("Cube_Door_Insert")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cubekey_door_begin");
					Animation(1, "obj_syncaction_interaction_cubekey_door");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ShowWeapons(0);

					ActionCenter(1);
					DisablePhysics(0);
					
					Transition("Cube_Door_Check")
					{
						AnimationFinished(0);
					}
				}

				State("Cube_Door_Check")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cubekey_door_wait");
					Animation(1, "obj_syncaction_interaction_cubekey_door_wait");

					ShowWeapons(0);

					ActionCenter(1);
					DisablePhysics(0);
					
					Transition("Cube_Door_Unlock")
					{
						AnimationFinished(0);
						//Add condition when Cube CAN open the door
					}
				}

				State("Cube_Door_Fail")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cubekey_door_fail_remove");
					Animation(1, "obj_syncaction_interaction_cubekey_door_fail");

					ShowWeapons(0);

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished(0);
					}
				}

				State("Cube_Door_Unlock")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cubekey_door_unlock");
					Animation(1, "obj_syncaction_interaction_cubekey_door_unlock");

					ShowWeapons(0);

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}		
	}


    Group("Cube_Door_Fake")
	{
		UseMaginOverride();
		SyncAction("Cube_Door_Fake", "Cube_Door")
        {
            States()
			{ 
                State("Cube_Door_Check")
                {
                    RequiredActors(0, 1);
                    
                    Animation(0, "m_fpp_syncaction_interaction_cubekey_door_wait");
                    Animation(1, "obj_syncaction_interaction_cubekey_door_wait");

                    ShowWeapons(0);

                    ActionCenter(1);
                    DisablePhysics(0);
                    
                    Transition("Cube_Door_Fail") //FORCING FAIL FOR NOW
                    {
                        AnimationFinished(0);
                        //Add condition when Cube CANNOT open the door
                    }
                }
            }
        }
    }
    
    Group("Cube_Switch")
    {
		UseMaginOverride();
        SyncAction("SwitchCubeOn")
        {
            Conditions()
			{
                Tags("TriggerAction_TurnOn");
            
                InventoryItemRequired(0)
                {
                    Item("Quest_Cube");
                }
			}
            
            Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube");
                    }
                }
                Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM_ALT)
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube_Active");
                    }
                }
			}
            
            States()
			{ 
				StartState("SwitchCubeOn");

				State("SwitchCubeOn")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_security_panel_gre");
					Animation(1, "obj_syncaction_interaction_security_panel_gre");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					
                    MaintainLookDirection(true);
			

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("SwitchCubeOff", "SwitchCubeOn")
        {
            Conditions()
			{
                Tags("TriggerAction_TurnOff");
            
                InventoryItemRequired(0)
                {
                    Item("Quest_Cube");
                }
			}
            
            Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube");
                    }
                }
                Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM_ALT)
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube_Active");
                    }
                }
			}
        }
    }

    Group("InhibitorFirstUse")
	{
		UseMaginOverride();
		SyncAction("InhibitorFirstUseA")
		{	
            Conditions()
			{
			}
        
			Events()
			{
				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM)
                {
                    ShowInventoryItem(0, "LEFT", true)
                    {
                        Item("Inhibitor_Container_Bundle3");
                    }
                }
                Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM_ALT)
                {
                    ShowInventoryItem(0, "RIGHT", true)
                    {
                        Item("Inhibitor_Syringe");
                    }
                }
                Event(ANIM_EVENT, 0, SYNCACTION_DROP_ITEM)
                {
                    HideInventoryItem(0);
                }
                Event(ANIM_EVENT, 0, SYNCACTION_HIDE_ITEM)
                {
                    OpenMenu(0, GAME_MENU_INVENTORY);
                }
			}
					
			States()
			{ 
				StartState("InhibitorFirstUseState");

				State("InhibitorFirstUseState")
				{
					RequiredActors(0);
					
					Animation(0, "m_fpp_syncaction_interaction_inhibitor_firstuse");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(0);
					
					MaintainLookDirection(true);

                    Discardable(true);

					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
	}

    Group("InhibitorFirstGlitch")
	{
		UseMaginOverride();
		SyncAction("InhibitorFirstGlitchA")
		{	
            Conditions()
			{
			}
        
			Events()
			{
				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM)
                {
                    ShowInventoryItem(0, "RIGHT", true)
                    {
                        Item("Inhibitor_Syringe");
                    }
                }
                Event(ANIM_EVENT, 0, SYNCACTION_HIDE_ITEM)
                {
                    HideInventoryItem(0);
                }
			}
					
			States()
			{ 
				StartState("InhibitorFirstUseState");

				State("InhibitorFirstUseState")
				{
					RequiredActors(0);
					
					Animation(0, "m_fpp_syncaction_interaction_inhibitor_glitch");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.02);

					ActionCenter(0);

					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
	}



	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	// CONTAINERS
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////



	///////////////////////////////////////////////////////////////////////////////
	// DEFAULT LOOT CHEST
	///////////////////////////////////////////////////////////////////////////////
	Group("LootChest")
	{
		UseMaginOverride();
		SyncAction("LootChestOpen")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("LootChestOpen");

				State("LootChestOpen")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_loot_chest_open");
					Animation(1, "obj_syncaction_interaction_loot_chest_open");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					MaintainLookDirection(true);

					BlockDamageReactions(1.0);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_loot_chest_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_loot_chest_open", 0.0);
			}
		}
	}










	///////////////////////////////////////////////////////////////////////////////
	// CrystalsSearch    TEMP
	///////////////////////////////////////////////////////////////////////////////
	Group("CrystalsSearch")
	{
		UseMaginOverride();
		SyncAction("CrystalsSearch")
		{	
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("CrystalsSearch_Begin");

				State("CrystalsSearch_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_crystalssearch_begin");
					Animation(1, "obj_syncaction_interaction_crystalssearch_begin"); 
	

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					//Transition("CrystalsSearch_Idle")
					Transition("CrystalsSearch_Success")
					{
						AnimationFinished();
					}
				}

				State("CrystalsSearch_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_crystalssearch_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_crystalssearch_idle", 0.0, true);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);

					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("CrystalsSearch_Struggle")
					{
						WaitTime(0.33);
					}
				}

				State("CrystalsSearch_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_crystalssearch_struggle");
					Animation(1, "obj_syncaction_interaction_crystalssearch_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("CrystalsSearch_Success")
					{
						AnimationFinished();
						TappingGameValue(0.5);
					}
					
					Transition("CrystalsSearch_Idle")
					{
						IsExhausted(0);
					}
				}

				State("CrystalsSearch_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_crystalssearch_success");
					Animation(1, "obj_syncaction_interaction_crystalssearch_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_crystalssearch_success");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_crystalssearch_begin", 0.0);
			}
		}
	}


















	///////////////////////////////////////////////////////////////////////////////
	// Fridge Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("Fridge")
	{
		UseMaginOverride();
		SyncAction("Fridge")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Fridge_open");

				State("Fridge_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_fridge");
					Animation(1, "obj_syncaction_interaction_fridge");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_fridge");
			}
		}
	}












	///////////////////////////////////////////////////////////////////////////////
	// Wardrobe Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("Wardrobe")
	{
		UseMaginOverride();
		SyncAction("Wardrobe")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("Wardrobe_open");

				State("Wardrobe_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_wardrobe_double");
					Animation(1, "obj_syncaction_interaction_wardrobe_double");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);	
				    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_wardrobe_double");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_wardrobe_double", 0.0);
			}
		}
	}
    
    Group("SingleDoor_Cabinet")
	{
		SyncAction("SingleDoor_Cabinet_Open")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("SingleDoor_Cabinet_Open");

				State("SingleDoor_Cabinet_Open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_wardrobe_single_doors");
					Animation(1, "obj_syncaction_interaction_wardrobe_signle_doors");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);	
				    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_wardrobe_double");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_wardrobe_double", 0.0);
			}
		}
	}

	Group("SingleDoor_steel_locker")
	{
		UseMaginOverride();
		SyncAction("SingleDoor_steel_locker")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("SingleDoor_steel_locker_open");

				State("SingleDoor_steel_locker_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_singledoor_steel_locker");
					Animation(1, "obj_syncaction_interaction_singledoor_steel_locker");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
				    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_singledoor_steel_locker");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_singledoor_steel_locker", 0.0);
			}
		}
	}


    Group("Package_locker")
	{
		SyncAction("Package_locker")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("Package_locker_open");

				State("Package_locker_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_singledoor_package_locker");
					Animation(1, "obj_syncaction_interaction_singledoor_package_locker");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					DisablePhysics(0);
					ActionCenter(1);
					ActionCenterDirection(1);
				    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_singledoor_steel_locker");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_singledoor_steel_locker", 0.0);
			}
		}
	}




	///////////////////////////////////////////////////////////////////////////////
	// Military Cargo Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("MilitaryCargo")
	{
		UseMaginOverride();
		SyncAction("MilitaryCargo")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("MilitaryCargo_open");

				State("MilitaryCargo_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_militarycargo");
					Animation(1, "obj_syncaction_interaction_militarycargo");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_militarycargo");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_militarycargo", 0.0);
			}
		}
	}



	///////////////////////////////////////////////////////////////////////////////
	// Open Chest Struggle
	///////////////////////////////////////////////////////////////////////////////	
	Group("ChestStraps_Taptap")
	{
		UseMaginOverride();
		SyncAction("ChestStraps_Taptap")
		{
			Conditions()
			{
                Tags("TriggerAction_Open");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("ChestStraps_Taptap_Begin");

				State("ChestStraps_Taptap_Begin")
				{
					Animation(0, "m_fpp_syncaction_interaction_strapchest_begin");
					Animation(1, "obj_syncaction_interaction_strapchest_begin", 0.0);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.0);
					BlendDirection(1, 0, 0.0, 0.0);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);						
					
					//Transition("ChestStraps_Taptap_Idle")
					Transition("ChestStraps_Taptap_Success")
					{
						AnimationFinished();
					}
				}

				State("ChestStraps_Taptap_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_strapchest_idle", 0.0, true);
					Animation(1, "obj_syncaction_interaction_strapchest_idle", 0.0, true);

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);	
					Breakable(0);
                    
					//StartTappingGame(0, 0.5, 1.000, 1.000, 20, false);
					
					Transition("ChestStraps_Taptap_Struggle")
					{
						WaitTime(0.01);
					}
				}

				State("ChestStraps_Taptap_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_strapchest_struggle");
					Animation(1, "obj_syncaction_interaction_strapchest_struggle", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);	
					Breakable(0);
                    
					//StartTappingGame(0, 0.5, 1.000, 1.000, 20, false);
			
					Transition("ChestStraps_Taptap_Success")
					{
						AnimationFinished();
						TappingGameValue(0.5);
					}
					
					Transition("ChestStraps_Taptap_Idle")
					{
						IsExhausted(0);
					}

					/*Transition("MilitaryCargoStruggle_Fail")
					{

						IsExhausted(0);
					}*/
				}

				State("ChestStraps_Taptap_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_strapchest_success");
					Animation(1, "obj_syncaction_interaction_strapchest_success", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);						
					MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}

				/*State("ChestStraps_Taptap_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_militarycargo_struggle_fail");
					Animation(1, "obj_syncaction_interaction_militarycargo_struggle_fail", 0.0);

					RequiredActors(0, 1);
					ActionCenter(1);
						
					EndTransition()
					{
						AnimationFinished();
						
			  
					}
				}*/
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_strapchest_success");
			}
			TriggerState("None")
			{
				Animation("obj_syncaction_interaction_strapchest_begin", 0.0);
			}
		}
		
	}

    Group("ChestBox_Taptap")
    {
		UseMaginOverride();
        SyncAction("ChestBox_TapTap", "ChestStraps_Taptap")
        {
            States()
            {
                ExtendState("ChestStraps_Taptap_Begin")
                {
                    Animation(0, "m_fpp_syncaction_interaction_boxchest_begin");
                }

                ExtendState("ChestStraps_Taptap_Struggle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_boxchest_struggle");
                }

                ExtendState("ChestStraps_Taptap_Success")
                {
                    Animation(0, "m_fpp_syncaction_interaction_boxchest_success");
                }
            }
        }
        
        TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_strapchest_success");
			}
			TriggerState("None")
			{
				Animation("m_fpp_syncaction_interaction_boxchest_begin", 0.0);
			}
		}
    }


	///////////////////////////////////////////////////////////////////////////////
	// Car Trunk Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("hatchback_trunk")
	{
		UseMaginOverride();
		SyncAction("hatchback_trunk")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("hatchback_trunk_open");

				State("hatchback_trunk_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_car_trunk_open_01");
					Animation(1, "obj_syncaction_interaction_car_trunk_open_01");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);
					
					BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_car_trunk_open_01");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_car_trunk_open_01", 0.0);
			}
		}
	}

	Group("sedan_trunk")
	{
		UseMaginOverride();
		SyncAction("sedan_trunk")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("sedan_trunk_open");

				State("sedan_trunk_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_sedan_trunk_open_01");
					Animation(1, "obj_syncaction_interaction_sedan_trunk_open_01");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_sedan_trunk_open_01");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_sedan_trunk_open_01", 0.0);
			}
		}
	}

	Group("van_trunk")
	{
		UseMaginOverride();
		SyncAction("van_trunk")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("van_trunk_open");

				State("van_trunk_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_van_trunk_open_01");
					Animation(1, "obj_syncaction_interaction_van_trunk_open_01");

					BlendPosition(0, 0, 0.5, 0.2, true);
					BlendDirection(0, 0, 0.5, 0.2, true);

					BlendPosition(1, 0, 0.0, 0.2);
					BlendDirection(1, 0, 0.0, 0.2);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_van_trunk_open_01");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_van_trunk_open_01", 0.0);
			}
		}
	}
    
	Group("veh_trunk")
	{
		UseMaginOverride();
		SyncAction("veh_trunk")
		{
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("veh_trunk_open");

				State("veh_trunk_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_veh_trunk_open_01");
					Animation(1, "obj_syncaction_interaction_veh_trunk_open_01");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_veh_trunk_open_01");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_veh_trunk_open_01", 0.0);
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// furniture chest Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("FurnitureChest")
	{
		UseMaginOverride();
		SyncAction("FurnitureChest")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("FurnitureChest_open");

				State("FurnitureChest_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_furniture_chest_open");
					Animation(1, "obj_syncaction_interaction_furniture_chest_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_furniture_chest_open");
			}
		}
	}
	
	
	///////////////////////////////////////////////////////////////////////////////
	// firstaid Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("FirstaidLoot")
	{
		UseMaginOverride();
		SyncAction("FirstaidLoot")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("FirstaidLoot_open");

				State("FirstaidLoot_open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_firstAid_open");
					Animation(1, "obj_syncaction_interaction_firstAid_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_firstAid_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_firstAid_open", 0.0);
			}
		}

	}

	
	///////////////////////////////////////////////////////////////////////////////
	// loot Basket
	///////////////////////////////////////////////////////////////////////////////
	Group("BigBasketLoot")
	{
		UseMaginOverride();
		SyncAction("BigBasketLoot")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("BigBasketLoot");

				State("BigBasketLoot")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_bigBasket_open");
					Animation(1, "obj_syncaction_interaction_bigBasket_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_bigBasket_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_bigBasket_open", 0.0);
			}
		}

	}
	
	
	
	
	///////////////////////////////////////////////////////////////////////////////
	// small Crate Loot
	///////////////////////////////////////////////////////////////////////////////
	Group("SmallCrateLoot")
	{
		UseMaginOverride();
		SyncAction("SmallCrateLoot")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("SmallCrateLoot");

				State("SmallCrateLoot")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_smallCrate_open");
					Animation(1, "obj_syncaction_interaction_smallCrate_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_smallCrate_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_smallCrate_open", 0.0);
			}
		}

	}
	
	
	///////////////////////////////////////////////////////////////////////////////
	// loot Basket C
	///////////////////////////////////////////////////////////////////////////////
	Group("BasketCLoot")
	{
		UseMaginOverride();
		SyncAction("BasketCLoot")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("BasketCLoot");

				State("BasketCLoot")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_lootBaske_C_open");
					Animation(1, "obj_syncaction_interaction_lootBasket_C_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);
                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_lootBasket_C_open");
			}
			TriggerState("Use")
			{
				Animation("m_fpp_syncaction_interaction_lootBaske_C_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_lootBasket_C_open", 0.0);
			}
		}

	}
	
	///////////////////////////////////////////////////////////////////////////////
	// loot toolBox A
	///////////////////////////////////////////////////////////////////////////////
	Group("ToolBoxALoot")
	{
		UseMaginOverride();
		SyncAction("ToolBoxALoot")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("ToolBoxALoot");

				State("ToolBoxALoot")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_toolBox_A_open");
					Animation(1, "obj_syncaction_interaction_toolBox_A_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 2.0, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_toolBox_A_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_toolBox_A_open", 0.0);
			}
		}

	}
	
	
	///////////////////////////////////////////////////////////////////////////////
	// loot toolBox B
	///////////////////////////////////////////////////////////////////////////////
	Group("ToolBoxALootB")
	{
		UseMaginOverride();
		SyncAction("ToolBoxALootB")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("ToolBoxALootB");

				State("ToolBoxALootB")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_toolBox_B_open");
					Animation(1, "obj_syncaction_interaction_toolBox_B_open");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.5);
					DisablePhysics(0);

					ActionCenter(1);
					ActionCenterDirection(1);

                    MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_toolBox_B_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_toolBox_B_open", 0.0);
			}
		}
	}



	///////////////////////////////////////////////////////////////////////////////
	// AIRDROP CHEST - CUBE CONTAINER
	///////////////////////////////////////////////////////////////////////////////
	Group("CubeContainer")
	{
		UseMaginOverride();
		SyncAction("CubeContainer")
		{
            Conditions()
			{
                Tags("TriggerAction_UseCube");

			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Cube");
                    }
                }
			}

			States()
			{ 
				StartState("CubeContainerOpen");

				State("CubeContainerOpen")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_airdropchest__open");
					Animation(1, "obj_syncaction_interaction_airdropchest_open");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);

					ShowWeapons(0);

					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_loot_chest_open");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_loot_chest_open", 0.0);
			}
		}
	}



    ///////////////////////////////////////////////////////////////////////////////
	// SettingAlarm
	///////////////////////////////////////////////////////////////////////////////
    Group("SettingAlarm")
	{
		UseMaginOverride();
		SyncAction("SettingAlarm")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}

				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("Quest_Alarm");
                    }
                }
                
                Event(ANIM_EVENT, 0, SYNCACTION_DROP_ITEM)
                {
                    DropInventoryItem(0, "Quest_Alarm");
                    RemoveInventoryItem(0)
                    {
                        Item("Quest_Alarm");
                    }
                    HideInventoryItem(0);
                }
			}

			States()
			{ 
				StartState("SettingAlarm_On");

				State("SettingAlarm_On")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_alarm_install_01");
					Animation(1, "obj_syncaction_interaction_alarm_install_01");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					//ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
    }
	
    ///////////////////////////////////////////////////////////////////////////////
	// SlantedPanel
	///////////////////////////////////////////////////////////////////////////////
    Group("SlantedPanel")
	{
		UseMaginOverride();
		SyncAction("SlantedPanel_On")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}
            
            Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
            }

			States()
			{ 
				StartState("SlantedPanel_On");

				State("SlantedPanel_On")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_switch_slanted_panel");
					Animation(1, "obj_syncaction_interaction_switch_slanted_panel");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);

					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("SlantedPanel_Off")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}
            
            Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
            }

			States()
			{ 
				StartState("SlantedPanel_Off");

				State("SlantedPanel_Off")
				{
					RequiredActors(0, 1);
					
                    Animation(0, "m_fpp_syncaction_interaction_unswitch_slanted_panel");
					Animation(1, "obj_syncaction_interaction_unswitch_slanted_panel");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);

					ActionCenter(1);
					//ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_switch_slanted_panel");
			}
            TriggerState("TurnOff")
			{
				Animation("obj_syncaction_interaction_unswitch_slanted_panel");
			}
		}
    }
    
    Group("SlantedPanelBroken")
    {
		UseMaginOverride();
        SyncAction("SlantedPanel_OnBroken", "SlantedPanel_On")
		{	
       					
			States()
			{ 
				StartState("SlantedPanel_On");

				ExtendState("SlantedPanel_On")
				{				
					Animation(1, "obj_syncaction_interaction_switch_slanted_panel_noskin");					
				}
			}
		}
    }
	
    ///////////////////////////////////////////////////////////////////////////////
	// FireplaceRest
	///////////////////////////////////////////////////////////////////////////////
    Group("FireplaceRest")
    {
		UseMaginOverride();
        SyncAction("FireplaceRest")
        {
            Conditions()
            {
                Tags("TriggerAction_TurnOn");
            }
			SoundEvents()
			{
			EntrySoundEvent("set_gp_storyteller_in");
			ExitSoundEvent("set_gp_storyteller_none");
			}
            States()
            { 
                StartState("FireplaceRest_Sit");

                State("FireplaceRest_Sit")
				{
					RequiredActors(0, 1);

					Animation(0, "m_fpp_syncaction_interaction_sitting_down");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 0.5, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(1.5);

					ActionCenter(1);

                    UseRestingMode(true);
					
                    Transition("FireplaceRest_Stand")
					{
						EventTriggered(0, LOGIC_EVENT, EVENT_ACTOR_REQUEST_RESTING_FINISH);
					}

					Transition("FireplaceRest_Loop")
					{
						AnimationFinished();
					}
				}

				State("FireplaceRest_Loop")
				{
					Animation(0, "m_fpp_syncaction_interaction_loop", 0.0, true);					

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    AllowLook(60, 40);

                    UseRestingMode(true);

                    ApplyHealingName("Healing_Campfire_Storyteller");

                    Transition("FireplaceRest_Stand")
					{
						EventTriggered(0, LOGIC_EVENT, EVENT_ACTOR_REQUEST_RESTING_FINISH);
					}
				}

				State("FireplaceRest_Stand")
                {
                    Animation(0, "m_fpp_syncaction_interaction_standing_up");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.3);

					ActionCenter(1);
					ActionCenterDirection(1);
				
					MaintainLookDirection(true);	
                    EndTransition()
                    {
                        AnimationFinished();
                    }
                }                
			}
        }
    }
    
    Group("GenericSittingPlace")
    {
        UseMaginOverride();
        SyncAction("GenericSittingPlace", "FireplaceRest")
        {
           
        }
    }

	///////////////////////////////////////////////////////////////////////////////
	// Opening Vent Cap
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("VentCap")
	{
		UseMaginOverride();
        SyncAction("VentCap_On")
        {
            Conditions()
            {
                Tags("TriggerAction_Open");
            }

            Events()
            {
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
                {
                    TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
                }
            }

            States()
            { 
                StartState("VentCap_Begin");

                State("VentCap_Begin")
                {

                    Animation(0, "m_fpp_syncaction_interaction_opening_vent_cap_begin");
                    Animation(1, "obj_syncaction_interaction_opening_vent_cap_begin");

                    RequiredActors(0, 1);
                    ActionCenter(1);
					
                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					ActionCenterDirection(1);
                    
                    //Transition("VentCap_Idle")
					Transition("VentCap_End")
                    {
                        AnimationFinished();
						//WaitTime(0.33);
                    }
                }

                State("VentCap_Idle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_opening_vent_cap_idle", 0.2, true);
                    Animation(1, "obj_syncaction_interaction_opening_vent_cap_idle", 0.2, true);

                    RequiredActors(0, 1);
                    ActionCenter(1);
					
                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);
					
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);

                    Transition("VentCap_Struggle")
                    {
                        WaitTime(0.01);
                    }
                }

                State("VentCap_Struggle")
                {
					Animation(0, "m_fpp_syncaction_interaction_opening_vent_cap_struggle");
                    Animation(1, "obj_syncaction_interaction_opening_vent_cap_struggle");
					
                    RequiredActors(0, 1);
                    ActionCenter(1);
					
                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);
					
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);

                    Transition("VentCap_End")
                    {
                        //AnimationFinished();
                        WaitTime(0.33);
                    }

                    Transition("VentCap_Idle")
                    {
                        AnimationFinished();
						IsExhausted(0);
                    }

                }
                State("VentCap_End")
                {
                    RequiredActors(0, 1);

                    Animation(0, "m_fpp_syncaction_interaction_opening_vent_cap_remove");
                    Animation(1, "obj_syncaction_interaction_opening_vent_cap_remove");

                    ActionCenter(1);
					MaintainLookDirection(true);	
                    EndTransition()
                    {
                        AnimationFinished();
                    }
                }
            }
        }

        TriggerStates()
        {
            TriggerState("Open")
            {
                Animation("obj_syncaction_interaction_opening_vent_cap_remove");
            }

        }
    }
    
	///////////////////////////////////////////////////////////////////////////////
	// Opening Drawer
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("OpenDrawer")
	{
		UseMaginOverride();
		SyncAction("OpenDrawer")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("OpenDrawer");

				State("OpenDrawer")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_opening_drawer");
					Animation(1, "obj_syncaction_interaction_opening_drawer");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_opening_drawer");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_opening_drawer", 0.0);
			}
		}
	}

	Group("HealingFountain")
    {
		UseMaginOverride();
        SyncAction("DrinkFromHealingFountain")
        {
            Conditions()
			{
                Tags("TriggerAction_Heal");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
                
                Event(ANIM_EVENT, 0, SYNCACTION_ACTIVATE_ITEM)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_SECONDARY_INTERACTION);
				}
			}
            
            States()
			{ 
				StartState("HealingFountainStart");

                State("HealingFountainStart")
                {                   
                    RequiredActors(0,1);
					
					Animation(0, "m_fpp_syncaction_fountain_start");	

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 0.5, true);

					BlendLookDirection(2);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
					Transition("HealingFountainPreUsing")
					{
						AnimationFinished();
					}
                }

                State("HealingFountainPreUsing")
                {
                    RequiredActors(0,1);
					
					Animation(0, "m_fpp_syncaction_fountain_preloop");	

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    AvailableInput("_ACTION_EXECUTE_TRIGGER", 100.0);

					Transition("HealingFountainDrink")
					{
						Input(0, "_ACTION_EXECUTE_TRIGGER", 0.0);
                        WasUsed(1);
					}
                    
                    Transition("HealingFountainFinish")
					{
						Input(0, "_ACTION_EXECUTE_TRIGGER", 0.0);
					}

					Transition("HealingFountainUsing")
					{
						AnimationFinished();
					}
                }

                State("HealingFountainUsing")
                {
                    RequiredActors(0,1);
					
					Animation(0, "m_fpp_syncaction_fountain_loop");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    AvailableInput("_ACTION_EXECUTE_TRIGGER", 100.0);

					Transition("HealingFountainDrink")
					{
						Input(0, "_ACTION_EXECUTE_TRIGGER", 0.0);
					}
                    
                    Transition("HealingFountainDrink")
					{
						WasUsed(1, true);
					}

					Transition("HealingFountainPreUsing") 
					{
						AnimationFinished();
					}
                }

                State("HealingFountainDrink")
                {
                    RequiredActors(0,1);
					
					Animation(0, "m_fpp_syncaction_fountain_drink");	

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					Transition("HealingFountainFinish")
					{
						AnimationFinished();
					}
                }

                State("HealingFountainFinish")
                {
                    RequiredActors(0); // required tylko na graczu
					
					Animation(0, "m_fpp_syncaction_fountain_fin");	

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);

					ActionCenter(1);
					ActionCenterDirection(1);

					EndTransition()
					{
						AnimationFinished();
					}
                }

			}
        
        }
    }
	
	///////////////////////////////////////////////////////////////////////////////
	// Opening Hatch
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("OpeningHatch")
	{
		UseMaginOverride();
        SyncAction("OpeningHatchFromInside")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
                VertPositionOffset(1, 0, -10, -90);
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("OpeningHatchFromInside");

				State("OpeningHatchFromInside")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_opening_hatch_inside");
					Animation(1, "obj_syncaction_interaction_opening_hatch_inside");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					MaintainLookDirection(true);
                    DisablePhysics(0);					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		SyncAction("OpeningHatch_Open")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
                VertPositionOffset(1, 0, 90, -10);
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("OpeningHatch_Open_Begin");

				State("OpeningHatch_Open_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_opening_hatch_begin");
					Animation(1, "obj_syncaction_interaction_opening_hatch_begin");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					Transition("OpeningHatch_Open")
					{
						AnimationFinished();
					}
					
				}
				
				State("OpeningHatch_Open")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_opening_hatch");
					Animation(1, "obj_syncaction_interaction_opening_hatch");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_opening_hatch");
			}
		}
	}
    
	///////////////////////////////////////////////////////////////////////////////
	// Windmill I
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("Windmill_1")
	{
		UseMaginOverride();
		SyncAction("Windmill_1_Open")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Windmill_1_Open");

				State("Windmill_1_Open")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_windmill_1");
					Animation(1, "obj_syncaction_interaction_windmill_1");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);
					
					BlendLookDirection(0.5);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					

					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_windmill_1");
			}
            
            TriggerState("Close")
            {
                Animation("obj_syncaction_interaction_windmill_1");
            }
		}
	}	
    
	///////////////////////////////////////////////////////////////////////////////
	// Windmill II
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("Windmill_2")
	{
		UseMaginOverride();
		SyncAction("Windmill_2")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Windmill_2");

				State("Windmill_2")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_windmill_2");
					Animation(1, "obj_syncaction_interaction_windmill_2");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);
					
					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_windmill_2");
			}
            
            TriggerState("Close")
            {
                Animation("obj_syncaction_interaction_windmill_2");
            }
		}
	}
    
	///////////////////////////////////////////////////////////////////////////////
	// Windmill III
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("Windmill_3")
	{
		UseMaginOverride();
		SyncAction("Windmill_3")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("Windmill_3");

				State("Windmill_3")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_windmill_3");
					Animation(1, "obj_syncaction_interaction_windmill_3");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_windmill_3");
			}
            
            TriggerState("Close")
            {
                Animation("obj_syncaction_interaction_windmill_3");
            }
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// Destroying Cannon
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("DestroyingCannon")
	{
		UseMaginOverride();
		SyncAction("DestroyingCannon")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("DestroyingCannon");

				State("DestroyingCannon")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_destroying_cannon");
					Animation(1, "obj_syncaction_interaction_destroying_cannon");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_destroying_cannon");
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// Opening Safe
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("OpeningSafe")
	{
		UseMaginOverride();
		SyncAction("OpeningSafe")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("OpeningSafe");

				State("OpeningSafe")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_opening_safe");
					Animation(1, "obj_syncaction_interaction_opening_safe");
	
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);						
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_opening_safe");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_opening_safe", 0.0);
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// Open Door Struggle
	///////////////////////////////////////////////////////////////////////////////	
	Group("GRE_Sluice")
	{
		UseMaginOverride();
		SyncAction("GRE_Sluice")
		{
			Conditions()
			{
                Tags("TriggerAction_Open");
			}

			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{
				StartState("GRE_Sluice_Begin");
				State("GRE_Sluice_Begin")

				{
					Animation(0, "m_fpp_syncaction_interaction_GRE_sluice_begin");
					Animation(1, "obj_syncaction_interaction_GRE_sluice_begin");

					RequiredActors(0, 1);
					ActionCenter(1);
					
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					ActionCenterDirection(1);
					
					//Transition("GRE_Sluice_Idle")
					Transition("GRE_Sluice_Success")
					{
						AnimationFinished();
					}
				}

				State("GRE_Sluice_Idle")
				{
					Animation(0, "m_fpp_syncaction_interaction_GRE_sluice_loop");
					Animation(1, "obj_syncaction_interaction_GRE_sluice_loop");

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
					
					Transition("GRE_Sluice_Struggle")
					{
						WaitTime(0.01);
					}
				}	

				State("GRE_Sluice_Struggle")
				{
					Animation(0, "m_fpp_syncaction_interaction_GRE_sluice_struggle");
					Animation(1, "obj_syncaction_interaction_GRE_sluice_struggle");

					RequiredActors(0, 1);
					ActionCenter(1);

					Breakable(0);
					
					//StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
			
					Transition("GRE_Sluice_Success")
					{
						AnimationFinished();
					}
					
					Transition("GRE_Sluice_Idle")
					{
						WaitTime(10.0);
					}

					Transition("GRE_Sluice_Fail")
					{
						IsExhausted(0);
					}
				}

				State("GRE_Sluice_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_GRE_sluice_end");
					Animation(1, "obj_syncaction_interaction_GRE_sluice_end");

					RequiredActors(0, 1);
					ActionCenter(1);
					
					MaintainLookDirection(true);	
					
					EndTransition()
					{
						AnimationFinished();
					}
				}

				State("GRE_Sluice_Fail")
				{
					Animation(0, "m_fpp_syncaction_interaction_GRE_sluice_end");
					Animation(1, "obj_syncaction_interaction_GRE_sluice_end");

					RequiredActors(0, 1);
					ActionCenter(1);
					
					MaintainLookDirection(true);	
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_GRE_sluice_end");
			}
            
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_GRE_sluice_begin", 0);
			}
		}
	}
	///////////////////////////////////////////////////////////////////////////////
	// Move Book Case
	///////////////////////////////////////////////////////////////////////////////
    Group("MoveBookcase")
	{
		UseMaginOverride();
		SyncAction("MoveBookcase")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MoveBookcase_Begin");

				State("MoveBookcase_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_begin");
					Animation(1, "obj_syncaction_interaction_move_bookcase_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
                    DisablePhysics(0);					
					//Transition("MoveBookcase_Idle")
					Transition("MoveBookcase_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("MoveBookcase_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_idle", 0.2, true);
					Animation(1, "obj_syncaction_interaction_move_bookcase_idle", 0.2, true);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
                    
					Transition("MoveBookcase_Struggle")
					{
						WaitTime(0.01);
					}
				}
                
                State("MoveBookcase_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_push");
					Animation(1, "obj_syncaction_interaction_move_bookcase_push");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
                    
					Transition("MoveBookcase_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("MoveBookcase_Idle")
					{
                        AnimationFinished();
						IsExhausted(0);
					}
				}
                
                State("MoveBookcase_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_success");
					Animation(1, "obj_syncaction_interaction_move_bookcase_success");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
                    
					MaintainLookDirection(true);	
                    DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_move_bookcase_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_move_bookcase_begin", 0);
            }
		}
    }
	
	///////////////////////////////////////////////////////////////////////////////
	// Move Book Case 2
	///////////////////////////////////////////////////////////////////////////////
    Group("MoveBookcaseHospital")
	{
		UseMaginOverride();
		SyncAction("MoveBookcaseHospital")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MoveBookcase_Begin");

				State("MoveBookcase_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_begin_02");
					Animation(1, "obj_syncaction_interaction_move_bookcase_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
                    DisablePhysics(0);					
					//Transition("MoveBookcase_Idle")
					Transition("MoveBookcase_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("MoveBookcase_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_idle_02", 0.2, true);
					Animation(1, "obj_syncaction_interaction_move_bookcase_idle", 0.2, true);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.2, 0.75, 2.5, 6, false);
                    
					Transition("MoveBookcase_Struggle")
					{
						TappingGameValue(0.5);
					}
				}
                
                State("MoveBookcase_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_push_02");
					Animation(1, "obj_syncaction_interaction_move_bookcase_push");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.2, 0.75, 2.5, 6, false);
                    
					Transition("MoveBookcase_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("MoveBookcase_Idle")
					{
                        AnimationFinished();
						IsExhausted(0);
					}
				}
                
                State("MoveBookcase_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_success_02");
					Animation(1, "obj_syncaction_interaction_move_bookcase_success");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
                    
					MaintainLookDirection(true);	
                    DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_move_bookcase_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_move_bookcase_begin", 0);
            }
		}
    }
	
	///////////////////////////////////////////////////////////////////////////////
	// Move Book Case 3
	///////////////////////////////////////////////////////////////////////////////
    Group("MoveBookcaseWorkshop")
	{
		UseMaginOverride();
		SyncAction("MoveBookcaseWorkshop")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MoveBookcase_Begin");

				State("MoveBookcase_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_begin_03");
					Animation(1, "obj_syncaction_interaction_move_bookcase_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
                    DisablePhysics(0);					
					//Transition("MoveBookcase_Idle")
					Transition("MoveBookcase_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("MoveBookcase_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_idle_03", 0.2, true);
					Animation(1, "obj_syncaction_interaction_move_bookcase_idle", 0.2, true);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.2, 0.75, 2.5, 6, false);
                    
					Transition("MoveBookcase_Struggle")
					{
						TappingGameValue(0.5);
					}
				}
                
                State("MoveBookcase_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_push_03");
					Animation(1, "obj_syncaction_interaction_move_bookcase_push");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.2, 0.75, 2.5, 6, false);
                    
					Transition("MoveBookcase_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("MoveBookcase_Idle")
					{
                        AnimationFinished();
						IsExhausted(0);
					}
				}
                
                State("MoveBookcase_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_success_03");
					Animation(1, "obj_syncaction_interaction_move_bookcase_success");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
                    
					MaintainLookDirection(true);	
                    DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_move_bookcase_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_move_bookcase_begin", 0);
            }
		}
    }
	
	///////////////////////////////////////////////////////////////////////////////
	// Move Book Case - Tower Raid
	///////////////////////////////////////////////////////////////////////////////
    Group("MoveBookcaseTR")
	{
		UseMaginOverride();
		SyncAction("MoveBookcaseTR")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MoveBookcaseTR_Begin");

				State("MoveBookcaseTR_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_begin");
					Animation(1, "obj_syncaction_interaction_move_bookcase_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
                    DisablePhysics(0);					
					//Transition("MoveBookcaseTR_Idle")
					Transition("MoveBookcaseTR_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("MoveBookcaseTR_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_idle", 0.2, true);
					Animation(1, "obj_syncaction_interaction_move_bookcase_idle", 0.2, true);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.06, 0.75, 6, 6, false);

					Transition("MoveBookcaseTR_Struggle")
					{
						TappingGameValue(0.3);
					}
				}
                
                State("MoveBookcaseTR_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_push_tower_raid_01");
					Animation(1, "obj_syncaction_interaction_move_bookcase_push_tower_raid");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.06, 0.75, 6, 6, false);

					Transition("MoveBookcaseTR_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("MoveBookcaseTR_Idle")
					{
                        AnimationFinished();
                        IsExhausted(0);
					}
				}
                
                State("MoveBookcaseTR_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_success");
					Animation(1, "obj_syncaction_interaction_move_bookcase_success");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
                    
					MaintainLookDirection(true);	
                    DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_move_bookcase_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_move_bookcase_begin", 0);
            }
		}
    }
	
	///////////////////////////////////////////////////////////////////////////////
	// Move Book Case 2 - Tower Raid
	///////////////////////////////////////////////////////////////////////////////
    Group("MoveBookcaseHospitalTR")
	{
		UseMaginOverride();
		SyncAction("MoveBookcaseHospitalTR")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MoveBookcaseTR_Begin");

				State("MoveBookcaseTR_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_begin_02");
					Animation(1, "obj_syncaction_interaction_move_bookcase_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
                    DisablePhysics(0);					
					//Transition("MoveBookcaseTR_Idle")
					Transition("MoveBookcaseTR_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("MoveBookcaseTR_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_idle_02", 0.2, true);
					Animation(1, "obj_syncaction_interaction_move_bookcase_idle", 0.2, true);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.06, 0.75, 6, 6, false);
                    
					Transition("MoveBookcaseTR_Struggle")
					{
						TappingGameValue(0.3);
					}
				}
                
                State("MoveBookcaseTR_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_push_tower_raid_02");
					Animation(1, "obj_syncaction_interaction_move_bookcase_push_tower_raid");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.06, 0.75, 6, 6, false);

					Transition("MoveBookcaseTR_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("MoveBookcaseTR_Idle")
					{
                        AnimationFinished();
                        IsExhausted(0);
					}
				}
                
                State("MoveBookcaseTR_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_success_02");
					Animation(1, "obj_syncaction_interaction_move_bookcase_success");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
                    
					MaintainLookDirection(true);	
                    DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_move_bookcase_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_move_bookcase_begin", 0);
            }
		}
    }
	
	///////////////////////////////////////////////////////////////////////////////
	// Move Book Case 3 - Tower Raid
	///////////////////////////////////////////////////////////////////////////////
    Group("MoveBookcaseWorkshopTR")
	{
		UseMaginOverride();
		SyncAction("MoveBookcaseWorkshopTR")
		{	
            Conditions()
			{
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("MoveBookcaseTR_Begin");

				State("MoveBookcaseTR_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_begin_03");
					Animation(1, "obj_syncaction_interaction_move_bookcase_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
                    DisablePhysics(0);					
					//Transition("MoveBookcaseTR_Idle")
					Transition("MoveBookcaseTR_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("MoveBookcaseTR_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_idle_03", 0.2, true);
					Animation(1, "obj_syncaction_interaction_move_bookcase_idle", 0.2, true);

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.06, 0.75, 6, 6, false);
                    
					Transition("MoveBookcaseTR_Struggle")
					{
						TappingGameValue(0.3);
					}
				}
                
                State("MoveBookcaseTR_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_push_tower_raid_03");
					Animation(1, "obj_syncaction_interaction_move_bookcase_push_tower_raid");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.06, 0.75, 6, 6, false);

					Transition("MoveBookcaseTR_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("MoveBookcaseTR_Idle")
					{
                        AnimationFinished();
                        IsExhausted(0);
					}
				}
                
                State("MoveBookcaseTR_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_move_bookcase_success_03");
					Animation(1, "obj_syncaction_interaction_move_bookcase_success");

					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);

					ActionCenter(1);
					ActionCenterDirection(1);
                    
                    EnableInvulnerability(0);
                    
					MaintainLookDirection(true);	
                    DisablePhysics(0);
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_move_bookcase_success");
			}
            
            TriggerState("None")
            {
                Animation("obj_syncaction_interaction_move_bookcase_begin", 0);
            }
		}
    }
	
    ///////////////////////////////////////////////////////////////////////////////
	// Starting Generator
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("StartingGenerator")
	{
		UseMaginOverride();
        SyncAction("StartingGenerator_On")
        {
            Conditions()
            {
                Tags("TriggerAction_TurnOn");
            }

            Events()
            {
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
                {
                    TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
                }
            }

            States()
            { 
                StartState("StartingGenerator_Begin");

                State("StartingGenerator_Begin")
                {

                    Animation(0, "m_fpp_syncaction_interaction_starting_generator_begin");
                    Animation(1, "obj_syncaction_interaction_starting_generator_begin");

                    RequiredActors(0, 1);
                    ActionCenter(1);
					
                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					ActionCenterDirection(1);
                    
                    //Transition("StartingGenerator_Idle")
					Transition("StartingGenerator_End")
                    {
                        AnimationFinished();
						//WaitTime(0.33);
                    }
                }

                State("StartingGenerator_Idle")
                {
                    Animation(0, "m_fpp_syncaction_interaction_starting_generator_loop", 0.2, true);
                    Animation(1, "obj_syncaction_interaction_starting_generator_loop", 0.2, true);

                    RequiredActors(0, 1);
                    ActionCenter(1);
					
                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);
					
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.5, 1.000, 1.000, 20, false);

                    Transition("StartingGenerator_Struggle")
                    {
                        WaitTime(0.01);
                    }
                }

                State("StartingGenerator_Struggle")
                {
					Animation(0, "m_fpp_syncaction_interaction_starting_generator_struggle");
                    Animation(1, "obj_syncaction_interaction_starting_generator_struggle");
					
                    RequiredActors(0, 1);
                    ActionCenter(1);
					
                    BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);
					
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.5, 1.000, 1.000, 20, false);

                    Transition("StartingGenerator_End")
                    {
                        //AnimationFinished();
                        WaitTime(0.33);
                    }

                    Transition("StartingGenerator_Idle")
                    {
                        AnimationFinished();
						IsExhausted(0);
                    }

                }
                State("StartingGenerator_End")
                {
                    RequiredActors(0, 1);

                    Animation(0, "m_fpp_syncaction_interaction_starting_generator_finish");
                    Animation(1, "obj_syncaction_interaction_starting_generator_finish");

                    ActionCenter(1);
					MaintainLookDirection(true);	
                    EndTransition()
                    {
                        AnimationFinished();
                    }
                }
            }
        }
        
        SyncAction("StartingGenerator_OnCopy", "StartingGenerator_On")
        {
            Conditions()
            {
                Tags("TriggerAction_Use");
            }
        }
        
        SyncAction("StartingGenerator_Off")
        {
            Conditions()
            {
                Tags("TriggerAction_TurnOff");
            }

            Events()
            {
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
                {
                    TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
                }
            }
            
            States()
            { 
                StartState("StopGenerator");
                State("StopGenerator")
                {
                    RequiredActors(0, 1);

                    Animation(0, "m_fpp_syncaction_interaction_starting_generator_finish");
                    Animation(1, "obj_syncaction_interaction_starting_generator_finish");

                    ActionCenter(1);
                    MaintainLookDirection(true);	
                    EndTransition()
                    {
                        AnimationFinished();
                    }
                }
            }
        
        }

        TriggerStates()
        {
            TriggerState("On")
            {
                Animation("obj_syncaction_interaction_starting_generator_running", 0.2, true);
            }

        }
    }
    
 	///////////////////////////////////////////////////////////////////////////////
	// Slanted Panel Electric Substation
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("LaunchingAntena")
	{
		UseMaginOverride();
		SyncAction("LaunchingAntena")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("LaunchingAntena");

				State("LaunchingAntena")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_launching_antena");
					Animation(1, "obj_syncaction_interaction_launching_antena");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_launching_antena");
			}
            
            TriggerState("Close")
            {
                Animation("obj_syncaction_interaction_launching_antena");
            }
		}
	}



	///////////////////////////////////////////////////////////////////////////////
	// Switch Button
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("SwitchButton")
	{
		UseMaginOverride();
		SyncAction("SwitchButton")
		{	
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("SwitchButton");

				State("SwitchButton")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_switch_button");
					Animation(1, "obj_syncaction_interaction_switch_button");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("SwitchButtonOff", "SwitchButton")
		{	
			Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}
        }
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_switch_button");
			}
		}
	}  
  
	///////////////////////////////////////////////////////////////////////////////
	// Electric Substation
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("ElectricSubstation")
	{
		UseMaginOverride();
		SyncAction("ElectricSubstation")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("ElectricSubstation_Begin");

				State("ElectricSubstation_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_electric_substation_whole");
					Animation(1, "obj_syncaction_interaction_electric_substation_whole");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_electric_substation_whole");
			}
		}
	}  

	///////////////////////////////////////////////////////////////////////////////
	// Disarming Bomb
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("DisarmingBomb")
	{
		UseMaginOverride();
		SyncAction("DisarmingBomb")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("DisarmingBomb_Begin");

				State("DisarmingBomb_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_disarming_bomb_begin");
					Animation(1, "obj_syncaction_interaction_disarming_bomb_begin");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					MaintainLookDirection(true);
					
					Transition("DisarmingBomg_Idle")
					{
						AnimationFinished();
					}
				}
                State("DisarmingBomg_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_disarming_bomb_idle", 0.2, true);
					Animation(1, "obj_syncaction_interaction_disarming_bomb_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);

                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.2, 0.75, 2.5, 6, false);
                    
					Transition("DisarmingBomg_Struggle")
					{
						TappingGameValue(0.5);
					}
				}
                
                State("DisarmingBomg_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_disarming_bomb_struggle");
					Animation(1, "obj_syncaction_interaction_disarming_bomb_struggle");

					RequiredActors(0, 1);
					ActionCenter(1);
					
                    Breakable(0);

                    DisableGravity(0);

                    StartTappingGame(0, 0.2, 0.75, 2.5, 6, false);
                    
					Transition("DisarmingBomg_Success")
					{
                        AnimationFinished();
						TappingGameValue(0.5);
					}
                    Transition("DisarmingBomg_Idle")
					{
                        AnimationFinished();
                        TappingGameValue(0.0, 0.5);
					}
				}
                
                State("DisarmingBomg_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_disarming_bomb_end");
					Animation(1, "obj_syncaction_interaction_disarming_bomb_end");

					RequiredActors(0, 1);
					ActionCenter(1);
                    
					MaintainLookDirection(true);	
                    
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Move")
			{
				Animation("obj_syncaction_interaction_disarming_bomb_end");
			}
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Looking Through Door
	///////////////////////////////////////////////////////////////////////////////	

	Group("LookingThroughDoor")
	{
		UseMaginOverride();
		SyncAction("LookingThroughDoor")
		{	
                       
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("LookingThroughDoor");

				State("LookingThroughDoor")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_looking_through_door");
					Animation(1, "obj_syncaction_interaction_looking_through_door");
	
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					
                    MaintainLookDirection(true);
			

					ActionCenter(1);
					DisablePhysics(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_looking_through_door");
			}
        } 
    }    
    
   	///////////////////////////////////////////////////////////////////////////////
	// Cable source - connecting and taking cable
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("CableSource")
	{
		UseMaginOverride();
		SyncAction("CableSource")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("CableSource");

				State("CableSource")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_cable_source");
					Animation(1, "obj_syncaction_interaction_cable_source");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Use")
			{
				Animation("obj_syncaction_interaction_cable_source");
			}
		}
	}
    
	///////////////////////////////////////////////////////////////////////////////
	// Opening Hatch from Inside
	///////////////////////////////////////////////////////////////////////////////	
	
    Group("OpeningHatchFromInside")
	{
		UseMaginOverride();
		SyncAction("OpeningHatchFromInside")
		{	
			
			Conditions()
			{
                Tags("TriggerAction_Open");
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("OpeningHatchFromInside");

				State("OpeningHatchFromInside")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_opening_hatch_inside");
					Animation(1, "obj_syncaction_interaction_opening_hatch_inside");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.5);
					MaintainLookDirection(true);
					
					ActionCenter(1);
					ActionCenterDirection(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_opening_hatch_inside");
			}
		}
	}
    
    ///////////////////////////////////////////////////////////////////////////////
	// Military Generator
	///////////////////////////////////////////////////////////////////////////////
    Group("MilitaryGenerator")
	{
		UseMaginOverride();
		SyncAction("MilitaryGeneratorOn")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOn");
			}
            
            Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
            }

			States()
			{ 
				StartState("MilitaryGenerator");

				State("MilitaryGenerator")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_military_generator");
					Animation(1, "obj_syncaction_interaction_military_generator");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);

					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        SyncAction("MilitaryGeneratorOff")
		{			
			Conditions()
			{
                Tags("TriggerAction_TurnOff");
			}
            
            Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
            }

			States()
			{ 
				StartState("MilitaryGenerator");

				State("MilitaryGenerator")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_military_generator_off");
					Animation(1, "obj_syncaction_interaction_military_generator_off");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.2, 0.35);
					BlendDirection(0, 0, 0.2, 0.35);

					BlendPosition(1, 0, 0.0, 0.75);
					BlendDirection(1, 0, 0.0, 0.75);

					BlendLookDirection(0.3);
					MaintainLookDirection(true);

					ActionCenter(1);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
        
        
        TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_switch_slanted_panel");
			}
		}
    }
    
    ///////////////////////////////////////////////////////////////////////////////
	// Open Tank Container
	///////////////////////////////////////////////////////////////////////////////
    Group("OpenTank")
	{
		UseMaginOverride();
		SyncAction("OpenTank")
		{	
            Conditions()
			{
                Tags("TriggerAction_Open");
			}
        
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}            
			}
					
			States()
			{ 
				StartState("OpenTank_Begin");

				State("OpenTank_Begin")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_open_tank_begin");
					Animation(1, "obj_syncaction_interaction_open_tank_begin");
                    
					RequiredActors(0, 1);

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					BlendLookDirection(0.1);
					MaintainLookDirection(true);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);					
					//Transition("OpenTank_Idle")
					Transition("OpenTank_Success")
					{
						AnimationFinished();
					}
                    
				}

                State("OpenTank_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_open_tank_loop", 0.2, true);
					Animation(1, "obj_syncaction_interaction_open_tank_loop", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
                    
					Transition("OpenTank_Struggle")
					{
						WaitTime(0.01);
					}
				}
                
                State("OpenTank_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_open_tank_struggle");
					Animation(1, "obj_syncaction_interaction_open_tank_struggle");

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);					
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.4, 1.000, 1.000, 20, false);
                    
					Transition("OpenTank_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("OpenTank_Idle")
					{
                        AnimationFinished();
						IsExhausted(0);
					}
				}
                
                State("OpenTank_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_open_tank_end");
					Animation(1, "obj_syncaction_interaction_open_tank_end");

					RequiredActors(0, 1);
					ActionCenter(1);
 					DisablePhysics(0);                   
					MaintainLookDirection(true);	
                    
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}

		TriggerStates()
		{
			TriggerState("Open")
			{
				Animation("obj_syncaction_interaction_open_tank_end");
			}
            TriggerState("None")
			{
				Animation("obj_syncaction_interaction_open_tank_begin", 0.0);
			}
		}
    }
    
 	///////////////////////////////////////////////////////////////////////////////
	// Modern Button
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("ModernButton")
	{
		UseMaginOverride();
		SyncAction("ModernButton")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("ModernButton");

				State("ModernButton")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_modern_button");
					Animation(1, "obj_syncaction_interaction_modern_button");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_modern_button");
			}
		}
	}    
    
 	///////////////////////////////////////////////////////////////////////////////
	// Fast Button Punch
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("ButtonPunch")
	{
		UseMaginOverride();
		SyncAction("ButtonPunch")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("ButtonPunch");

				State("ButtonPunch")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_button_punch");
					Animation(1, "obj_syncaction_interaction_button_punch");

					BlendPosition(0, 0, 0.2, 0.4, true);
					BlendDirection(0, 0, 0.2, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1,0);
					
                    BlendLookDirection(0.4);
					MaintainLookDirection(true);
                    
                    EnableInvulnerability(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_button_punch");
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// Synced Button Punch
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("ButtonPunchSynced")
	{
		UseMaginOverride();
		SyncAction("ButtonPunchSynced")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("ButtonPunchSynced");

				State("ButtonPunchSynced")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_button_punch_synced");
					Animation(1, "obj_syncaction_interaction_button_punch");

					BlendPosition(0, 0, 0.2, 0.4, true);
					BlendDirection(0, 0, 0.2, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1,0);
					
                    BlendLookDirection(0.4);
					MaintainLookDirection(true);
                    
                    EnableInvulnerability(0);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_button_punch");
			}
		}
	}
	
  	///////////////////////////////////////////////////////////////////////////////
	// Grab Crystals
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("GrabCrystals")
	{
		UseMaginOverride();
		SyncAction("GrabCrystals")
		{	
			
			Conditions()
			{        
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("GrabCrystals_Begin");

				State("GrabCrystals_Begin")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_crystals_begin");
					Animation(1, "obj_syncaction_interaction_crystals_begin");
					
					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);						
                    BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					//Transition("GrabCrystals_Idle")
					Transition("GrabCrystals_Success")
					{
						AnimationFinished();
					}
				}
                
                State("GrabCrystals_Idle")
				{
					
					Animation(0, "m_fpp_syncaction_interaction_crystals_idle", 0.2, true);
					Animation(1, "obj_syncaction_interaction_crystals_idle", 0.2, true);

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);	
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.33, 1.000, 1.000, 20, false);
                    
					Transition("GrabCrystals_Struggle")
					{
						WaitTime(0.01);
					}
				}
                
                State("GrabCrystals_Struggle")
				{
	
					Animation(0, "m_fpp_syncaction_interaction_crystals_struggle");
					Animation(1, "obj_syncaction_interaction_crystals_struggle");

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);						
                    Breakable(0);

                    DisableGravity(0);

                    //StartTappingGame(0, 0.33, 1.000, 1.000, 20, false);
                    
					Transition("GrabCrystals_Success")
					{
                        //AnimationFinished();
						WaitTime(0.33);
					}
                    Transition("GrabCrystals_Idle")
					{
                        //AnimationFinished();
						IsExhausted(0);
					}
				}
                
                State("GrabCrystals_Success")
				{
					Animation(0, "m_fpp_syncaction_interaction_crystals_end");
					Animation(1, "obj_syncaction_interaction_crystals_end");

					RequiredActors(0, 1);
					ActionCenter(1);
					DisablePhysics(0);	                    
					MaintainLookDirection(true);	
                    
					EndTransition()
					{
						AnimationFinished();
					}
				}               
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_crystals_end");
			}
            TriggerState("TurnOff")
			{
				Animation("obj_syncaction_interaction_crystals_begin", 0.0);
			}
		}
	}  

	///////////////////////////////////////////////////////////////////////////////
	// Tower Raid Card Reader
	///////////////////////////////////////////////////////////////////////////////	

	Group("CardReader")
	{
		UseMaginOverride();
		SyncAction("CardReader")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
				Event(ANIM_EVENT, 0, SYNCACTION_SHOW_ITEM  )
                {
                    ShowInventoryItem(0, "RIGHT")
                    {
                        Item("TowerRaid_Card");
                    }
                }
			}

			States()
			{ 
				StartState("CardReader");

				State("CardReader")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_tower_raid_card");
					Animation(1, "obj_syncaction_interaction_tower_raid_card");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);						
                    BlendLookDirection(0.3);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_tower_raid_card");
			}
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	// Fuse Box
	///////////////////////////////////////////////////////////////////////////////	

	Group("FuxeBoxTR")
	{
		UseMaginOverride();
		SyncAction("FuxeBoxTR")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}

			States()
			{ 
				StartState("FuxeBoxTR");

				State("FuxeBoxTR")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_tr_fusebox");
					Animation(1, "obj_syncaction_interaction_tr_fusebox");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					DisablePhysics(0);						
                    BlendLookDirection(0.3);
					
					EndTransition()
					{
						AnimationFinished();
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_tr_fusebox");
			}
		}
	}	
    
	///////////////////////////////////////////////////////////////////////////////
	// Tower Raid Elevator Button
	///////////////////////////////////////////////////////////////////////////////	
	
	Group("TowerRaidElevatorButton")
	{
		UseMaginOverride();
		SyncAction("TowerRaidElevatorButton")
		{	
			
			Conditions()
			{
			}
			Events()
			{
                Event(ANIM_EVENT, 0, INTERACTION_TRIGGER_USE)
				{
					TriggerScriptEvent(1, SCRIPT_EVENT_INTERACTION);
				}
			}
					
			States()
			{ 
				StartState("TowerRaidElevatorButton");

				State("TowerRaidElevatorButton")
				{
					RequiredActors(0, 1);
					
					Animation(0, "m_fpp_syncaction_interaction_tower_raid_elevator_button");
					Animation(1, "obj_syncaction_interaction_tower_raid_elevator_button");

					BlendPosition(0, 0, 0.5, 0.5, true);
					BlendDirection(0, 0, 0.5, 2.0, true);

					ActionCenter(1);
					ActionCenterDirection(1);
					
                    BlendLookDirection(0.3);
					MaintainLookDirection(true);
					
					EndTransition()
					{
						AnimationFinished(0);
					}
				}
			}
		}
		
		TriggerStates()
		{
			TriggerState("TurnOn")
			{
				Animation("obj_syncaction_interaction_tower_raid_elevator_button");
			}
		}
	}    
}

