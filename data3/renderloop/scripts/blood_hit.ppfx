import "EngineDefs.mth"
import "common.ppfx"

sub blood_hit_buffers()
{
	BufferFormat("HIT_128x32_R8_MASK", 128, 64, "R8_UNORM", "");	
}

sub blood_hit_init()
{
	use clear_rtv_color(s_buf = "HIT_128x32_R8_MASK");  
}

sub blood_hit_blur(string s_msk_near_2 = "")
{
	If("f_pp_game_player_blood_hit_on")
	{
		If("f_game_player_blood_hit_clear", "==", "0.0")
		{
			PushMarker("Screen Blood Blur");
				SetRenderTargets(s_msk_near_2, "read_only_ds");
					SetBuffer(USERMAP_TMP_0, "HIT_128x32_R8_MASK");
						Mesh("tri_screen.msh", "stencil_clear_mask.mat", "std");
			PopMarker();
		}
	}	
}

sub blood_hit_msk_update()
{
	If("f_game_player_blood_hit_clear", "&&", "f_pp_game_player_blood_hit_on")
	{
		PushMarker("Screen Blood Clear");
			SetClearColor(0.0, 0.0, 0.0, 0.0);
			SetRenderTargets("HIT_128x32_R8_MASK", "color");
		PopMarker();
	}
	Else()
	{
		PushMarker("Screen Blood Update");
			SetRenderTargets("HIT_128x32_R8_MASK", "");
				Mesh("tri_screen.msh", "player_state_hit_fade.mat", "std");
					If("f_game_player_blood_hit_splat")
					{
						Mesh("tri_screen.msh", "stencil_clear_mask.mat", "std");
					}
					If("f_pp_game_player_health_low")
					{
						Mesh("tri_screen.msh", "stencil_clear_mask.mat", "std");
					}
		PopMarker();
	}
}

sub blood_hit_resolve()
{
	If("f_pp_game_player_blood_hit_on")
	{	
		If("f_game_player_blood_hit_clear", "==", "0.0")
		{
			PushMarker("Blood Hit Resolve");
				SetRenderTargets(S_SDR_A, "");
					SetBuffer(USERMAP_TMP_0, "HIT_128x32_R8_MASK");
						Mesh("tri_screen.msh", "stencil_clear_mask.mat", "std");
			PopMarker();
		}
	}
}